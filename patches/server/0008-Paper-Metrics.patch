From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Fri, 24 Mar 2017 23:56:01 -0500
Subject: [PATCH] Paper Metrics

Removes Spigot's mcstats metrics in favor of a system using bStats

To disable for privacy or other reasons go to the bStats folder in your plugins folder
and edit the config.yml file present there.

Please keep in mind the data collected is anonymous and collection should have no
tangible effect on server performance. The data is used to allow the authors of
PaperMC to track version and platform usage so that we can make better management
decisions on behalf of the project.

diff --git a/build.gradle.kts b/build.gradle.kts
index c462f9fc70ef2286da21d7c5b96ac68ff602a310..cc203e7bd23bb7778319e9fb66258c6797d4b94c 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -33,6 +33,7 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.0")
 
     implementation("io.netty:netty-all:4.1.65.Final") // Paper
+    implementation("org.bstats:bstats-base:2.2.1") // Paper
 
     testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
@@ -83,6 +84,7 @@ relocation {
 
     relocate("org.jline:jline-terminal-jansi", "org.jline" to cb("jline"))
     sequenceOf(
+        "org.bstats:bstats-base" to "org.bstats", // Paper
         "commons-codec:commons-codec" to "org.apache.commons.codec",
         "commons-io:commons-io" to "org.apache.commons.io",
         //"it.unimi.dsi:fastutil" to "it.unimi", // Paper - don't relocate fastutil
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
new file mode 100644
index 0000000000000000000000000000000000000000..aa9e515f9c58fded7d92a872a5c2704550fbbf29
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -0,0 +1,160 @@
+package com.destroystokyo.paper;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import net.minecraft.server.MinecraftServer;
+import org.bstats.MetricsBase;
+import org.bstats.charts.DrilldownPie;
+import org.bstats.charts.SimplePie;
+import org.bstats.charts.SingleLineChart;
+import org.bstats.config.MetricsConfig;
+import org.bstats.json.JsonObjectBuilder;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.plugin.Plugin;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * bStats collects some data for plugin authors.
+ *
+ * Check out https://bStats.org/ to learn more about bStats!
+ */
+public class Metrics {
+
+    private static Logger logger = LoggerFactory.getLogger("bStats");
+
+    private MetricsBase metricsBase;
+
+    public Metrics() {
+        File bStatsFolder = new File((File) MinecraftServer.getServer().options.valueOf("plugins"), "bStats");
+        File configFile = new File(bStatsFolder, "config.yml");
+        MetricsConfig config;
+        try {
+            config = new MetricsConfig(configFile, true);
+        } catch (IOException e) {
+            logger.error("Failed to create bStats config", e);
+            return;
+        }
+
+        this.metricsBase = new MetricsBase(
+            "server-implementation",
+            config.getServerUUID(),
+            580,
+            config.isEnabled(),
+            this::appendPlatformData,
+            jsonObjectBuilder -> { /* NOP */ },
+            null,
+            () -> !MinecraftServer.getServer().hasStopped(),
+            logger::warn,
+            logger::info,
+            config.isLogErrorsEnabled(),
+            config.isLogSentDataEnabled(),
+            config.isLogResponseStatusTextEnabled()
+        );
+
+        if (!config.didExistBefore()) {
+            // Send an info message when the bStats config file gets created for the first time
+            logger.info("Paper and some of its plugins collect metrics"
+                + " and send them to bStats (https://bStats.org).");
+            logger.info("bStats collects some basic information for plugin"
+                + " authors, like how many people use");
+            logger.info("their plugin and their total player count."
+                + " It's recommended to keep bStats enabled, but");
+            logger.info("if you're not comfortable with this, you can opt-out"
+                + " by editing the config.yml file in");
+            logger.info("the '{}' folder and setting enabled to false.", bStatsFolder.getPath());
+        }
+
+        this.metricsBase.addCustomChart(new SimplePie("minecraft_version", () -> {
+            String minecraftVersion = Bukkit.getVersion();
+            minecraftVersion = minecraftVersion.substring(minecraftVersion.indexOf("MC: ") + 4, minecraftVersion.length() - 1);
+            return minecraftVersion;
+        }));
+
+        this.metricsBase.addCustomChart(new SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+        this.metricsBase.addCustomChart(new SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+        this.metricsBase.addCustomChart(new SimplePie("paper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
+
+        this.metricsBase.addCustomChart(new DrilldownPie("java_version", () -> {
+            Map<String, Map<String, Integer>> map = new HashMap<>();
+            String javaVersion = System.getProperty("java.version");
+            Map<String, Integer> entry = new HashMap<>();
+            entry.put(javaVersion, 1);
+
+            // http://openjdk.java.net/jeps/223
+            // Java decided to change their versioning scheme and in doing so modified the java.version system
+            // property to return $major[.$minor][.$secuity][-ea], as opposed to 1.$major.0_$identifier
+            // we can handle pre-9 by checking if the "major" is equal to "1", otherwise, 9+
+            String majorVersion = javaVersion.split("\\.")[0];
+            String release;
+
+            int indexOf = javaVersion.lastIndexOf('.');
+
+            if (majorVersion.equals("1")) {
+                release = "Java " + javaVersion.substring(0, indexOf);
+            } else {
+                // of course, it really wouldn't be all that simple if they didn't add a quirk, now would it
+                // valid strings for the major may potentially include values such as -ea to deannotate a pre release
+                Matcher versionMatcher = Pattern.compile("\\d+").matcher(majorVersion);
+                if (versionMatcher.find()) {
+                    majorVersion = versionMatcher.group(0);
+                }
+                release = "Java " + majorVersion;
+            }
+            map.put(release, entry);
+
+            return map;
+        }));
+
+        this.metricsBase.addCustomChart(new DrilldownPie("legacy_plugins", () -> {
+            Map<String, Map<String, Integer>> map = new HashMap<>();
+
+            // count legacy plugins
+            int legacy = 0;
+            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+                if (CraftMagicNumbers.isLegacy(plugin.getDescription())) {
+                    legacy++;
+                }
+            }
+
+            // insert real value as lower dimension
+            Map<String, Integer> entry = new HashMap<>();
+            entry.put(String.valueOf(legacy), 1);
+
+            // create buckets as higher dimension
+            if (legacy == 0) {
+                map.put("0 \uD83D\uDE0E", entry); // :sunglasses:
+            } else if (legacy <= 5) {
+                map.put("1-5", entry);
+            } else if (legacy <= 10) {
+                map.put("6-10", entry);
+            } else if (legacy <= 25) {
+                map.put("11-25", entry);
+            } else if (legacy <= 50) {
+                map.put("26-50", entry);
+            } else {
+                map.put("50+ \uD83D\uDE2D", entry); // :cry:
+            }
+
+            return map;
+        }));
+    }
+
+    private void appendPlatformData(JsonObjectBuilder builder) {
+        builder.appendField("playerAmount", Bukkit.getOnlinePlayers().size());
+        builder.appendField("onlineMode", Bukkit.getOnlineMode() ? 1 : 0);
+        builder.appendField("bukkitVersion", Bukkit.getVersion());
+        builder.appendField("bukkitName", Bukkit.getName());
+
+        builder.appendField("javaVersion", System.getProperty("java.version"));
+        builder.appendField("osName", System.getProperty("os.name"));
+        builder.appendField("osArch", System.getProperty("os.arch"));
+        builder.appendField("osVersion", System.getProperty("os.version"));
+        builder.appendField("coreCount", Runtime.getRuntime().availableProcessors());
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index e4368db074da7b5e48b47d41875c1e63b9745c2a..f86d64b8711b4a8ef7e666fca1c88acbfadb41e8 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -42,6 +42,7 @@ public class PaperConfig {
     private static boolean verbose;
     private static boolean fatalError;
     /*========================================================================*/
+    private static boolean metricsStarted;
 
     public static void init(File configFile) {
         CONFIG_FILE = configFile;
@@ -84,6 +85,11 @@ public class PaperConfig {
         for (Map.Entry<String, Command> entry : commands.entrySet()) {
             MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Paper", entry.getValue());
         }
+
+        if (!metricsStarted) {
+            new Metrics();
+            metricsStarted = true;
+        }
     }
 
     static void readConfig(Class<?> clazz, Object instance) {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 58c9ab2f6db97bfbf280efc56f9c9be791604a75..f8a9d6a394f796634e4663ef4078a4c98447e13c 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -83,6 +83,7 @@ public class SpigotConfig
             MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
         }
 
+        /* // Paper - Replace with our own
         if ( SpigotConfig.metrics == null )
         {
             try
@@ -94,6 +95,7 @@ public class SpigotConfig
                 Bukkit.getServer().getLogger().log( Level.SEVERE, "Could not start metrics service", ex );
             }
         }
+        */ // Paper end
     }
 
     static void readConfig(Class<?> clazz, Object instance)
